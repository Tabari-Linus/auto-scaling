AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This template deploys a highly available, auto-scaling Apache web application
  in a VPC. It includes an Application Load Balancer and CPU-based scaling policies.

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24
  InstanceType:
    Type: String
    Default: t3.micro

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: AutoScalingLabVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AutoScalingLabIGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: PublicSubnet1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatEIP.AllocationId
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Instance Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y httpd stress

            # Create cgi-bin directory
            mkdir -p /var/www/cgi-bin

            # CPU stress script
            cat > /var/www/cgi-bin/stress.sh << 'EOF'
            #!/bin/bash
            echo "Content-type: text/html"
            echo ""
            # Start CPU stress for 60 seconds using 2 cores
            stress --cpu 2 --timeout 60 &
            echo "<html><body><h2>CPU stress started on this instance for 60 seconds</h2>"
            echo "<p>Instance: $(hostname)</p>"
            echo "<p>IP: $(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)</p></body></html>"
            EOF

            # Stop stress script
            cat > /var/www/cgi-bin/stop-stress.sh << 'EOF'
            #!/bin/bash
            echo "Content-type: text/html"
            echo ""
            pkill -f stress
            echo "<html><body><h2>CPU stress stopped on this instance</h2>"
            echo "<p>Instance: $(hostname)</p></body></html>"
            EOF

            # Status script
            cat > /var/www/cgi-bin/status.sh << 'EOF'
            #!/bin/bash
            echo "Content-type: text/html"
            echo ""
            echo "<html><body><h2>Instance Status</h2>"
            echo "<p>Instance ID: $(curl -s http://169.254.169.254/latest/meta-data/instance-id)</p>"
            echo "<p>IP Address: $(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)</p>"
            echo "<p>CPU Load: $(uptime | awk -F'load average:' '{print $2}')</p>"
            echo "</body></html>"
            EOF

            chmod +x /var/www/cgi-bin/*.sh

            # Build index page with enhanced UI
            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" -s)
            META_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/local-ipv4)
            META_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-id)
            AZ=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/placement/availability-zone)

            cat > /var/www/html/index.html << EOF
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Auto Scaling Lab</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        max-width: 800px;
                        margin: 0 auto;
                        padding: 20px;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                    }
                    .container {
                        background: rgba(255, 255, 255, 0.1);
                        padding: 30px;
                        border-radius: 15px;
                        backdrop-filter: blur(10px);
                    }
                    h1 {
                        text-align: center;
                        margin-bottom: 30px;
                    }
                    .instance-info {
                        background: rgba(255, 255, 255, 0.2);
                        padding: 20px;
                        border-radius: 10px;
                        margin-bottom: 20px;
                    }
                    .controls {
                        display: flex;
                        gap: 15px;
                        justify-content: center;
                        margin: 30px 0;
                    }
                    button {
                        padding: 15px 30px;
                        border: none;
                        border-radius: 8px;
                        background: #4CAF50;
                        color: white;
                        font-size: 16px;
                        cursor: pointer;
                        transition: background 0.3s;
                    }
                    button:hover {
                        background: #45a049;
                    }
                    button.stop {
                        background: #f44336;
                    }
                    button.stop:hover {
                        background: #da190b;
                    }
                    #result {
                        background: rgba(255, 255, 255, 0.2);
                        padding: 20px;
                        border-radius: 10px;
                        min-height: 100px;
                    }
                    .stats {
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                        gap: 15px;
                        margin-top: 20px;
                    }
                    .stat-box {
                        background: rgba(255, 255, 255, 0.2);
                        padding: 15px;
                        border-radius: 8px;
                        text-align: center;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>🚀 Auto Scaling Lab</h1>
                    
                    <div class="instance-info">
                        <h2>Instance Information</h2>
                        <p><strong>IP Address:</strong> $META_IP</p>
                        <p><strong>Instance ID:</strong> $META_ID</p>
                        <p><strong>Availability Zone:</strong> $AZ</p>
                    </div>

                    <div class="controls">
                        <button id="stressBtn" onclick="runStress()">🔥 Start CPU Stress</button>
                        <button id="stopBtn" class="stop" onclick="stopStress()">🛑 Stop CPU Stress</button>
                        <button id="statusBtn" onclick="checkStatus()">📊 Check Status</button>
                    </div>

                    <div id="result"></div>

                    <div class="stats">
                        <div class="stat-box">
                            <h3>ASG Stats</h3>
                            <p>Min: 1 instance</p>
                            <p>Desired: 1 instance</p>
                            <p>Max: 4 instances</p>
                        </div>
                        <div class="stat-box">
                            <h3>Scaling Policy</h3>
                            <p>Scale Out: >50% CPU</p>
                            <p>Scale In: <30% CPU</p>
                        </div>
                    </div>
                </div>

                <script>
                    function runStress() {
                        showLoading('Starting CPU stress...');
                        fetch('/cgi-bin/stress.sh')
                            .then(r => r.text())
                            .then(t => { 
                                document.getElementById('result').innerHTML = '<div style="color: #4CAF50;">' + t + '</div>';
                            })
                            .catch(e => { 
                                document.getElementById('result').innerHTML = '<div style="color: #f44336;">Error: ' + e + '</div>';
                            });
                    }

                    function stopStress() {
                        showLoading('Stopping CPU stress...');
                        fetch('/cgi-bin/stop-stress.sh')
                            .then(r => r.text())
                            .then(t => { 
                                document.getElementById('result').innerHTML = '<div style="color: #f44336;">' + t + '</div>';
                            })
                            .catch(e => { 
                                document.getElementById('result').innerHTML = '<div style="color: #f44336;">Error: ' + e + '</div>';
                            });
                    }

                    function checkStatus() {
                        showLoading('Checking instance status...');
                        fetch('/cgi-bin/status.sh')
                            .then(r => r.text())
                            .then(t => { 
                                document.getElementById('result').innerHTML = '<div style="color: #2196F3;">' + t + '</div>';
                            })
                            .catch(e => { 
                                document.getElementById('result').innerHTML = '<div style="color: #f44336;">Error: ' + e + '</div>';
                            });
                    }

                    function showLoading(message) {
                        document.getElementById('result').innerHTML = '<div style="text-align: center; padding: 20px;">⏳ ' + message + '</div>';
                    }

                    // Auto-refresh page every 30 seconds to show load balancer distribution
                    setTimeout(() => {
                        window.location.reload();
                    }, 30000);
                </script>
            </body>
            </html>
            EOF

            # Configure Apache for CGI
            cat > /etc/httpd/conf.d/cgi.conf << 'EOF'
            ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
            <Directory "/var/www/cgi-bin">
                AllowOverride None
                Options +ExecCGI
                AddHandler cgi-script .sh
                Require all granted
            </Directory>
            EOF

            # Set proper permissions
            chown -R apache:apache /var/www
            chmod 755 /var/www/cgi-bin/*.sh

            # Enable and start services
            systemctl enable httpd
            systemctl start httpd

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: AutoScalingInstance
          PropagateAtLaunch: true

  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      ScalingAdjustment: -1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 50
      AlarmDescription: Scale out when CPU utilization exceeds 50%
      Period: 60
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleOutPolicy

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 30
      AlarmDescription: Scale in when CPU utilization drops below 30%
      Period: 60
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleInPolicy

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      HealthCheckPath: /index.html
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:
  LoadBalancerDNS:
    Description: ALB DNS Name
    Value: !GetAtt LoadBalancer.DNSName
  GitHubRepo:
    Description: GitHub Repository URL
    Value: !Sub https://github.com/Tabari-Linus/auto-scaling
  AutoScalingGroupName:
    Description: Auto Scaling Group Name
    Value: !Ref AutoScalingGroup