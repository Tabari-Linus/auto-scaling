AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This template deploys a highly available, auto-scaling Apache web application
  in a VPC. It includes an Application Load Balancer and CPU-based scaling policies.

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24
  InstanceType:
    Type: String
    Default: t3.micro

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: AutoScalingLabVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AutoScalingLabIGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: PublicSubnet1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatEIP.AllocationId
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Instance Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y httpd bc

            # Create cgi-bin directory
            mkdir -p /var/www/cgi-bin

            # CPU stress script - Using mathematical calculations for maximum CPU load
            cat > /var/www/cgi-bin/stress.sh << 'EOF'
            #!/bin/bash
            echo "Content-type: text/html"
            echo ""
            
            # Kill any existing stress processes
            pkill -f cpu_stress 2>/dev/null || true
            
            # Start EXTREME CPU stress using mathematical calculations
            # This will push CPU to 100% guaranteed
            for i in {1..4}; do
                nohup bash -c '
                  while true; do
                    echo "scale=5000; 4*a(1)" | bc -l -q > /dev/null
                  done
                ' > /dev/null 2>&1 &
            done
            
            # Additional CPU intensive task - calculating pi to high precision
            nohup bash -c '
              while true; do
                echo "scale=10000; 4*a(1)" | bc -l -q > /dev/null
              done
            ' > /dev/null 2>&1 &
            
            echo "<html><body>"
            echo "<h2>ðŸ”¥ EXTREME CPU stress started!</h2>"
            echo "<p>Running heavy mathematical calculations</p>"
            echo "<p>Instance: $(curl -s http://169.254.169.254/latest/meta-data/instance-id)</p>"
            echo "<p>CPU should reach 100% and trigger auto-scaling</p>"
            echo "</body></html>"
            EOF

            # Alternative stress method using yes command
            cat > /var/www/cgi-bin/stress2.sh << 'EOF'
            #!/bin/bash
            echo "Content-type: text/html"
            echo ""
            
            # Kill any existing stress processes
            pkill -f cpu_stress 2>/dev/null || true
            
            # Start multiple yes commands - very CPU intensive
            for i in {1..8}; do
                nohup yes > /dev/null &
            done
            
            echo "<html><body>"
            echo "<h2>ðŸ”¥ YES command stress started!</h2>"
            echo "<p>Running multiple 'yes' commands</p>"
            echo "<p>Instance: $(curl -s http://169.254.169.254/latest/meta-data/instance-id)</p>"
            echo "<p>This method should also reach 100% CPU</p>"
            echo "</body></html>"
            EOF

            # Stop stress script - VERY aggressive
            cat > /var/www/cgi-bin/stop-stress.sh << 'EOF'
            #!/bin/bash
            echo "Content-type: text/html"
            echo ""
            
            # Kill ALL CPU-intensive processes
            pkill -f yes
            pkill -f bc
            pkill -f "scale="
            pkill -f "while true"
            
            # Force kill any remaining
            killall yes 2>/dev/null || true
            killall bc 2>/dev/null || true
            
            echo "<html><body>"
            echo "<h2>ðŸ›‘ ALL CPU stress stopped</h2>"
            echo "<p>Instance: $(curl -s http://169.254.169.254/latest/meta-data/instance-id)</p>"
            echo "</body></html>"
            EOF

            # Script to check current CPU usage
            cat > /var/www/cgi-bin/status.sh << 'EOF'
            #!/bin/bash
            echo "Content-type: text/html"
            echo ""
            
            CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')
            LOAD_AVG=$(uptime | awk -F'load average:' '{print $2}')
            PROCESSES=$(ps aux | grep -E "(yes|bc|scale)" | grep -v grep | wc -l)
            
            echo "<html><body>"
            echo "<h2>ðŸ“Š Current Status</h2>"
            echo "<p>Instance: $(curl -s http://169.254.169.254/latest/meta-data/instance-id)</p>"
            echo "<p>Current CPU Usage: $CPU_USAGE%</p>"
            echo "<p>Load Average: $LOAD_AVG</p>"
            echo "<p>Stress processes running: $PROCESSES</p>"
            echo "</body></html>"
            EOF

            chmod +x /var/www/cgi-bin/*.sh

            # Get instance metadata
            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" -s)
            META_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/local-ipv4)
            META_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-id)
            AZ=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/placement/availability-zone)

            # Simple index page with multiple stress options
            cat > /var/www/html/index.html << EOF
            <!DOCTYPE html>
            <html>
            <head>
                <title>Auto Scaling Lab</title>
                <style>
                    body { font-family: Arial, sans-serif; max-width: 700px; margin: 0 auto; padding: 20px; }
                    .container { background: #f5f5f5; padding: 20px; border-radius: 10px; }
                    h1 { color: #333; text-align: center; }
                    .info { background: white; padding: 15px; border-radius: 5px; margin: 10px 0; }
                    button { padding: 12px 24px; margin: 8px; border: none; border-radius: 5px; cursor: pointer; font-size: 14px; }
                    .stress { background: #ff4444; color: white; }
                    .stress2 { background: #ff0000; color: white; }
                    .stop { background: #444; color: white; }
                    .status { background: #007bff; color: white; }
                    #result { background: white; padding: 15px; border-radius: 5px; margin: 10px 0; min-height: 80px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>ðŸš€ Auto Scaling Lab - CPU Stress Test</h1>
                    
                    <div class="info">
                        <strong>Instance:</strong> $META_ID<br>
                        <strong>IP:</strong> $META_IP<br>
                        <strong>AZ:</strong> $AZ
                    </div>

                    <div>
                        <button class="stress" onclick="runStress()">Method 1: Math Calculations</button>
                        <button class="stress2" onclick="runStress2()">Method 2: YES Commands</button>
                        <button class="stop" onclick="stopStress()">Stop All Stress</button>
                        <button class="status" onclick="checkStatus()">Check Status</button>
                    </div>

                    <div id="result">Click a button to test auto-scaling. Try Method 1 first.</div>

                    <div class="info">
                        <strong>ASG Settings:</strong><br>
                        â€¢ Min: 1 instance | Desired: 1 | Max: 4 instances<br>
                        â€¢ Scale Out: CPU > 50% for 2 minutes<br>
                        â€¢ Scale In: CPU < 30% for 5 minutes<br>
                        â€¢ Target: Push CPU to 100% to trigger scaling
                    </div>
                </div>

                <script>
                    function runStress() {
                        document.getElementById('result').innerHTML = 'Starting Method 1: Heavy math calculations (Ï€ to 10,000 digits)...';
                        fetch('/cgi-bin/stress.sh')
                            .then(r => r.text())
                            .then(t => { 
                                document.getElementById('result').innerHTML = t + '<br><br>Wait 1-2 minutes, then check CloudWatch metrics.';
                            })
                            .catch(e => { 
                                document.getElementById('result').innerHTML = 'Error: ' + e;
                            });
                    }

                    function runStress2() {
                        document.getElementById('result').innerHTML = 'Starting Method 2: Multiple YES commands...';
                        fetch('/cgi-bin/stress2.sh')
                            .then(r => r.text())
                            .then(t => { 
                                document.getElementById('result').innerHTML = t + '<br><br>Wait 1-2 minutes, then check CloudWatch metrics.';
                            })
                            .catch(e => { 
                                document.getElementById('result').innerHTML = 'Error: ' + e;
                            });
                    }

                    function stopStress() {
                        document.getElementById('result').innerHTML = 'Stopping all CPU stress processes...';
                        fetch('/cgi-bin/stop-stress.sh')
                            .then(r => r.text())
                            .then(t => { 
                                document.getElementById('result').innerHTML = t;
                            })
                            .catch(e => { 
                                document.getElementById('result').innerHTML = 'Error: ' + e;
                            });
                    }

                    function checkStatus() {
                        document.getElementById('result').innerHTML = 'Checking current CPU status...';
                        fetch('/cgi-bin/status.sh')
                            .then(r => r.text())
                            .then(t => { 
                                document.getElementById('result').innerHTML = t;
                            })
                            .catch(e => { 
                                document.getElementById('result').innerHTML = 'Error: ' + e;
                            });
                    }
                </script>
            </body>
            </html>
            EOF

            # Configure Apache for CGI
            cat > /etc/httpd/conf.d/cgi.conf << 'EOF'
            ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
            <Directory "/var/www/cgi-bin">
                AllowOverride None
                Options +ExecCGI
                AddHandler cgi-script .sh
                Require all granted
            </Directory>
            EOF

            # Set proper permissions
            chown -R apache:apache /var/www
            chmod 755 /var/www/cgi-bin/*.sh

            # Enable and start services
            systemctl enable httpd
            systemctl start httpd
            
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: AutoScalingInstance
          PropagateAtLaunch: true

  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      ScalingAdjustment: -1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 50
      AlarmDescription: Scale out when CPU utilization exceeds 50%
      Period: 60
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleOutPolicy

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 5
      Statistic: Average
      Threshold: 30
      AlarmDescription: Scale in when CPU utilization drops below 30%
      Period: 60
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleInPolicy

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      HealthCheckPath: /index.html
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:
  LoadBalancerDNS:
    Description: ALB DNS Name
    Value: !GetAtt LoadBalancer.DNSName
  GitHubRepo:
    Description: GitHub Repository URL
    Value: !Sub https://github.com/Tabari-Linus/auto-scaling.git
  AutoScalingGroupName:
    Description: Auto Scaling Group Name
    Value: !Ref AutoScalingGroup